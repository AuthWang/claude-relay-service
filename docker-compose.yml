version: '3.8'

# Claude Relay Service Docker Compose 配置
# 所有配置通过环境变量设置，无需映射 .env 文件

services:
  # 🚀 Claude Relay Service
  claude-relay:
    build: .
    image: weishaw/claude-relay-service:latest
    restart: unless-stopped
    ports:
      # 绑定地址：生产环境建议使用反向代理，设置 BIND_HOST=127.0.0.1
      - "${BIND_HOST:-0.0.0.0}:${PORT:-3000}:3000"
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    environment:
      # 🌐 服务器配置
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      
      # 🔐 安全配置（必填）
      - JWT_SECRET=${JWT_SECRET}  # 必填：至少32字符的随机字符串
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}  # 必填：32字符的加密密钥
      - ADMIN_SESSION_TIMEOUT=${ADMIN_SESSION_TIMEOUT:-86400000}
      - API_KEY_PREFIX=${API_KEY_PREFIX:-cr_}
      
      # 👤 管理员凭据（可选）
      - ADMIN_USERNAME=${ADMIN_USERNAME:-}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-}
      
      # 📊 Redis 配置
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_ENABLE_TLS=${REDIS_ENABLE_TLS:-}

      # 🗄️ PostgreSQL 配置
      - POSTGRES_ENABLED=${POSTGRES_ENABLED:-false}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=${POSTGRES_DATABASE:-claude_relay}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-}

      # PostgreSQL 连接池配置
      - POSTGRES_POOL_MAX=${POSTGRES_POOL_MAX:-20}
      - POSTGRES_POOL_MIN=${POSTGRES_POOL_MIN:-5}
      - POSTGRES_POOL_IDLE_TIMEOUT=${POSTGRES_POOL_IDLE_TIMEOUT:-30000}
      - POSTGRES_POOL_CONNECT_TIMEOUT=${POSTGRES_POOL_CONNECT_TIMEOUT:-60000}

      # PostgreSQL SSL 配置
      - POSTGRES_SSL_ENABLED=${POSTGRES_SSL_ENABLED:-false}
      - POSTGRES_SSL_REJECT_UNAUTHORIZED=${POSTGRES_SSL_REJECT_UNAUTHORIZED:-true}

      # 🔄 混合数据库配置
      - DATABASE_STRATEGY=${DATABASE_STRATEGY:-redis_only}
      - CACHE_DEFAULT_TTL=${CACHE_DEFAULT_TTL:-3600}
      - CACHE_API_KEY_TTL=${CACHE_API_KEY_TTL:-86400}
      - CACHE_SESSION_TTL=${CACHE_SESSION_TTL:-1800}
      - CACHE_USAGE_STATS_TTL=${CACHE_USAGE_STATS_TTL:-300}
      - CACHE_ACCOUNT_TTL=${CACHE_ACCOUNT_TTL:-3600}

      # 数据同步配置
      - DATABASE_SYNC_ENABLED=${DATABASE_SYNC_ENABLED:-false}
      - DATABASE_SYNC_INTERVAL=${DATABASE_SYNC_INTERVAL:-3600000}
      - DATABASE_SYNC_ON_STARTUP=${DATABASE_SYNC_ON_STARTUP:-false}

      # 降级策略配置
      - DATABASE_FALLBACK_TIMEOUT=${DATABASE_FALLBACK_TIMEOUT:-5000}
      - DATABASE_FALLBACK_RETRIES=${DATABASE_FALLBACK_RETRIES:-3}
      
      # 🎯 Claude API 配置
      - CLAUDE_API_URL=${CLAUDE_API_URL:-https://api.anthropic.com/v1/messages}
      - CLAUDE_API_VERSION=${CLAUDE_API_VERSION:-2023-06-01}
      - CLAUDE_BETA_HEADER=${CLAUDE_BETA_HEADER:-claude-code-20250219,oauth-2025-04-20,interleaved-thinking-2025-05-14,fine-grained-tool-streaming-2025-05-14}
      
      # 🌐 代理配置
      - DEFAULT_PROXY_TIMEOUT=${DEFAULT_PROXY_TIMEOUT:-60000}
      - MAX_PROXY_RETRIES=${MAX_PROXY_RETRIES:-3}
      
      # 📈 使用限制
      - DEFAULT_TOKEN_LIMIT=${DEFAULT_TOKEN_LIMIT:-1000000}
      
      # 📝 日志配置
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_MAX_SIZE=${LOG_MAX_SIZE:-10m}
      - LOG_MAX_FILES=${LOG_MAX_FILES:-5}
      
      # 🔧 系统配置
      - CLEANUP_INTERVAL=${CLEANUP_INTERVAL:-3600000}
      - TOKEN_USAGE_RETENTION=${TOKEN_USAGE_RETENTION:-2592000000}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-60000}
      - TIMEZONE_OFFSET=${TIMEZONE_OFFSET:-8}
      
      # 🎨 Web 界面配置
      - WEB_TITLE=${WEB_TITLE:-Claude Relay Service}
      - WEB_DESCRIPTION=${WEB_DESCRIPTION:-Multi-account Claude API relay service}
      - WEB_LOGO_URL=${WEB_LOGO_URL:-/assets/logo.png}

      # 🔔 Webhook 配置
      - WEBHOOK_ENABLED=${WEBHOOK_ENABLED:-false}
      - WEBHOOK_DEFAULT_TIMEOUT=${WEBHOOK_DEFAULT_TIMEOUT:-10000}
      - WEBHOOK_MAX_RETRIES=${WEBHOOK_MAX_RETRIES:-3}
      - WEBHOOK_RETRY_DELAY=${WEBHOOK_RETRY_DELAY:-1000}
      - WEBHOOK_RATE_LIMIT=${WEBHOOK_RATE_LIMIT:-60}
      
      # 🛠️ 开发配置
      - DEBUG=${DEBUG:-false}
      - ENABLE_CORS=${ENABLE_CORS:-true}
      - TRUST_PROXY=${TRUST_PROXY:-true}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
        required: false  # PostgreSQL 可选，根据 POSTGRES_ENABLED 决定
    networks:
      - claude-relay-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 🗄️ PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: claude-relay-postgres
    restart: unless-stopped
    expose:
      - "5432"
    # 注意：如需本地调试访问，可取消下行注释（生产环境禁用）
    ports:
      - "127.0.0.1:${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
    environment:
      - POSTGRES_DB=${POSTGRES_DATABASE:-claude_relay}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    networks:
      - claude-relay-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DATABASE:-claude_relay}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - postgres
      - hybrid

  # 📊 Redis Database
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    # 仅在容器网络内部暴露端口，不映射到主机
    expose:
      - "6379"
    # 注意：如需本地调试访问，可取消下行注释（生产环境禁用）
    ports:
      - "127.0.0.1:${REDIS_PORT:-6379}:6379"
    volumes:
      - ./redis_data:/data
    command: redis-server --save 60 1 --appendonly yes --appendfsync everysec
    networks:
      - claude-relay-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 📈 Redis Monitoring (Optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    ports:
      - "127.0.0.1:${REDIS_WEB_PORT:-8081}:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - claude-relay-network
    profiles:
      - monitoring

  # 📊 Application Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "127.0.0.1:${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - claude-relay-network
    profiles:
      - monitoring

  # 📈 Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "127.0.0.1:${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - claude-relay-network
    profiles:
      - monitoring

  # 📊 pgAdmin - PostgreSQL 管理工具 (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: claude-relay-pgadmin
    restart: unless-stopped
    ports:
      - "127.0.0.1:${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json:ro
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@claude-relay.local}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-pgadmin123}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    depends_on:
      postgres:
        condition: service_healthy
        required: false
    networks:
      - claude-relay-network
    profiles:
      - monitoring
      - postgres
      - hybrid

volumes:
  postgres_data:
    driver: local
    name: claude-relay-postgres-data
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local
    name: claude-relay-pgadmin-data

networks:
  claude-relay-network:
    driver: bridge